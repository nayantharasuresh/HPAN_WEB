HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: nan (Best: nan @epoch 1)
Forward: 0.54s

Saving...
Total: 0.56s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 28.32s

Saving...
Total: 28.41s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 19.10s

Saving...
Total: 19.19s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 19.34s

Saving...
Total: 19.44s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 20.55s

Saving...
Total: 20.63s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 18.45s

Saving...
Total: 18.53s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 19.33s

Saving...
Total: 19.42s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 18.32s

Saving...
Total: 18.40s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 19.69s

Saving...
Total: 19.86s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 19.59s

Saving...
Total: 19.68s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 20.13s

Saving...
Total: 20.25s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 20.50s

Saving...
Total: 20.58s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 20.97s

Saving...
Total: 21.07s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 35.74s

Saving...
Total: 35.87s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 41.54s

Saving...
Total: 41.64s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 99.14s

Saving...
Total: 99.26s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 27.99s

Saving...
Total: 28.12s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 26.08s

Saving...
Total: 26.18s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 18.05s

Saving...
Total: 18.16s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 14.44s

Saving...
Total: 14.54s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 28.47s

Saving...
Total: 28.59s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 112.99s

Saving...
Total: 114.08s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 90.85s

Saving...
Total: 91.12s

HSPAN(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): HSPAM(
      (body): Sequential(
        (0): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (3): LEB(
          (body): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (4): HSPA(
          (conv_match1): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_match2): BasicBlock(
            (0): Conv2d(192, 96, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (conv_assembly): BasicBlock(
            (0): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))
            (1): PReLU(num_parameters=1)
          )
          (ST): SoftThresholdingOperation()
        )
        (5): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(192, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(192, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)

Evaluation:
[Demo x4]	PSNR: 0.0000 (Best: 0.0000 @epoch 1)
Forward: 114.92s

Saving...
Total: 115.58s

